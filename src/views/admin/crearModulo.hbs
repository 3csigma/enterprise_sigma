<style>
    .MsoListParagraphCxSpFirst, .MsoListParagraphCxSpMiddle, .MsoListParagraphCxSpLast {
        text-indent: 22pt !important;
    }
</style>
<!--**********************************
        Content body start
***********************************-->
<div class="content-body">
    <!-- row -->
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-12 col-xxl-12">
                <div class="card">
                    <div class="card-body">
                        <div id="modulos3c" class="form-wizard order-create sw sw-theme-default sw-justified">

                            {{!-- tabs --}}
                            <ul class="nav nav-wizard">
                                <li><a class="nav-link inactive active" href="#infoModulo">
                                        <span style="margin-top: 22px;">1</span>
                                        <label class="pasos">Información del módulo</label>
                                    </a>
                                </li>
                                <li><a class="nav-link inactive done" href="#temario">
                                        <span style="margin-top: 22px;">2</span>
                                        <label class="pasos">Temario</label>
                                    </a></li>
                                <li><a class="nav-link inactive" href="#guardar">
                                        <span style="margin-top: 22px;">3</span>
                                        <label class="pasos">Publicar/Guardar</label>
                                    </a>
                                </li>
                            </ul>

                            <div class="tab-content" id="contenido-pestanas">

                                {{!-- MODULO --}}
                                <div id="infoModulo" class="tab-pane" role="tabpanel"
                                    style="display: block; margin-left: 10%;">
                                    <div class="row">
                                        <div class="col-lg-8 mb-2">
                                            <div class="form-group">
                                                <label class="text-label">Nombre del módulo*</label>
                                                <input type="text" id="modulo" class="form-control"
                                                    style="border: 1px solid #DBDBDB;">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-4 mb-2">
                                            <div class="form-group">
                                                <label class="text-label">URL de la insignia*</label>
                                                <input type="text" id="insignia" class="form-control"
                                                    style="border: 1px solid #DBDBDB;">
                                            </div>
                                        </div>
                                        <div class="col-lg-4 mb-2">
                                            <div class="form-group">
                                                <label class="text-label">Nombre de la insignia*</label>
                                                <input type="text" id="nombre_insignia" class="form-control"
                                                    style="border: 1px solid #DBDBDB;">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-3 mb-2">
                                            <div class="form-group">
                                                <label class="text-label">Curso*</label>
                                                <select id="categoriaSelectModulo"
                                                    class="sltBuscar form-control input-recursos chosen-container chosen-container-single required">
                                                    <option value="">Escoge curso...</option>
                                                    {{#each categorias}}
                                                    <option value="{{this}}">{{this}}</option>
                                                    {{/each}}
                                                </select>
                                                <input type="hidden" id="categoriaHiddenModulo" name="categoria" value="">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-8 mb-2">
                                            <div class="form-group">
                                                <h3 style="font-weight: 500;font-size: 17px;color: #000000;">Programa(s)
                                                    destino*</h3>
                                                <div class="form-group">
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="1" checked="">Free Trial
                                                        </label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="2">Entrepreneur
                                                        </label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="3">Business
                                                        </label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="4">Enterprise
                                                        </label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="5">Accelerate
                                                        </label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="6">Por compra
                                                        </label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input programa"
                                                                value="7">NAR
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" style="display: grid;">
                                        <div class="col-6 mb-2">
                                            <label class="text-label">Thumbnail*</label>
                                            <div class="drag-area file-thumbnail file-leccion" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)" ondrop="dropHandler(event)">
                                                <center>
                                                    <label for="fileThumbnail" style="cursor: pointer;">
                                                        <img src="../img/thumbnail.svg" alt="" style="width: 121px; margin-top: -37px;">
                                                    </label>
                                                    <!-- Agregamos estilos CSS para posicionar el input fuera del área visible -->
                                                    <input type="file" name="file" class="fileThumbnail_" id="fileThumbnail" onchange="fileChange_(event, this)" accept=".jpg, .jpeg, .png, .gif, .tiff" style="position: absolute; top: -9999px;">
                                                </center>
                                                <h6 class="fw-700 text-black" style="margin-top: -35px;">Escoge o <span style="color:#812082;font-weight: 700;font-size: 14px;">arrastra</span> un archivo</h6>
                                            </div>
                                        </div>
                                        <div id="msgFile-thumbnail" style="margin-left: 10px;"></div>
                                    </div>
                                    <br>
                                </div>
                                {{!-- TEMARIO --}}
                                <div id="temario" class="tab-pane" role="tabpanel"
                                    style="display: none;margin-left: 10%;">
                                    <div class="row">
                                        <div class="col-lg-11">
                                            <div class="card-body">
                                                <!-- Contenedor para las lecciones -->
                                                <div id="contenedor-lecciones" class="accordion accordion-danger-solid sortable-container">
                                                    <div class="accordion__item" data-lesson-id="0" >
                                                        <div class="accordion__header" data-toggle="collapse" data-target="#bordered_collapseOne" style="margin-left: -15px;">
                                                            <span class="accordion__header--text">Lección por defecto</span>
                                                            <span class="accordion__header--indicator"></span>
                                                        </div>
                                                        <div id="bordered_collapseOne" class="collapse accordion__body show" data-parent="#contenedor-lecciones" style="margin-left: -15px;">
                                                            <div class="accordion__body--text">
                                                                <div class="row">
                                                                    <div class="col-lg-8 mb-2">
                                                                        <div class="form-group">
                                                                            <label class="text-label">Nombre de la lección*</label>
                                                                            <input type="text" id="leccion_0" class="form-control" style="border: 1px solid #DBDBDB;" value="Lección por defecto">
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="row">
                                                                    <div class="col-6 mb-2">
                                                                        <label class="text-label">Video de la lección*</label>
                                                                        <div class="drag-area file-videoleccion file-leccion" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)" ondrop="dropHandler(event)">
                                                                            <center>
                                                                                <button id="btnvideoleccion" onclick="btnFile_(event, this.parentNode)" style="border: 1px solid #ffffff00;background: #f0f8ff00;background-repeat: round;">
                                                                                    <img src="../img/thumbnail.svg" alt="Miniatura" style="width: 121px; margin-top: -37px;">
                                                                                </button>
                                                                                <input type="file" class="fileVideo_" id="video_0" onchange="fileChange_(event, event.target)" style="display: none;" accept=".mov, .mp4, .avi, .mkv">
                                                                            </center>
                                                                            <h6 class="fw-700 text-black">Escoge o <span 
                                                                            style="color:#812082;font-weight: 700;font-size: 14px;">arrastra</span> un archivo</h6>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-6 pt-4">
                                                                        <div id="portada-video_0">
                                                                            <img src="../img/Leccion-por-defecto.jpg" width="250" alt="Video por defecto">
                                                                        </div>
                                                                    </div>
                                                                    <div id="msgFile-video_0" class="col-12"></div>
                                                                </div>
                                                                <br>
                                                                <!-- Summernote -->
                                                                <div class="row">
                                                                    <div class="col-xl-12 col-xxl-12">
                                                                        <label class="text-label">Descripción de la lección</label>
                                                                        <div class="summernote-theme-1">
                                                                            <textarea name="name" class="summernote" id="summernote_0" rows="10"></textarea>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <br>
                                                                <div class="row" style="display: grid;">
                                                                    <div class="col-6 mb-2">
                                                                        <label class="text-label">Material descargable</label>
                                                                        <div class="drag-area file-material file-leccion"  ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)" ondrop="dropHandler(event)">
                                                                            <center>
                                                                                <button id="btnMaterial" onclick="btnFile_(event, this.parentNode)"style="border: 1px solid #ffffff00;background: #f0f8ff00;background-repeat: round;">
                                                                                    <img src="../img/thumbnail.svg" alt="Material" style="width: 121px; margin-top: -37px;">
                                                                                </button>
                                                                                <input type="file" class="fileMaterial_" id="material_0" onchange="fileChange_(event, event.target)" hidden>
                                                                            </center>
                                                                            <h6 class="fw-700 text-black">Escoge o <span style="color:#812082;font-weight: 700;font-size: 14px;">arrastra</span> un archivo</h6>
                                                                        </div>
                                                                    </div>
                                                                    <div id="msgFile-material_0" class="col-12"></div>
                                                                </div>
                                                                <br>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                {{!-- Boton para add nuevas lecciones --}}
                                                <button id="addLessonBtn" class="btn color_tertiary text-black" style="border-radius: 7px; border: 1px solid white;border-radius: 7px; margin-left: -23px;border: 1px solid white; padding: 6px 30px;" type="button"><i class="fa fa-plus"></i> Nueva lección</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {{!-- Guardar --}}
                                <div id="guardar" class="tab-pane" role="tabpanel"
                                    style="display: none;margin-left: 10%;">
                                    <div class="row">
                                        <div class="col-2">
                                            <h4 class="text-black">Estado</h4>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-2">
                                            <div class="d-flex align-items-center"><i
                                                    class="fa fa-circle text-danger mr-1"></i>Borrador</div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-14">
                                            <div style="margin-left: 15px;" id="resultado"></div>
                                        </div>
                                    </div>
                                    <br>
                                </div>
                            </div>
                            
                            {{!-- BOTONES --}}
                            <div class="toolbar toolbar-bottom btn-group btn-group-sm" role="toolbar"
                                style="text-align: right; margin-left: 10%;">
                                <button class="btn btn-primary sw-btn-prev" style="display: none; border-radius: 7px;"
                                    type="button">Anterior</button>

                                <button onclick="validarDatos()" class="btn btn-primary sw-btn-actualizar"
                                style="display: none;border-radius: 7px;" type="button">Siguiente</button>

                                <button onclick="guardarYMostrarDatos()" class="btn btn-primary sw-btn-next"
                                    style="display: none;border-radius: 7px;" id="btnNextStep" type="button">Siguiente</button>

                                <button onclick="addModulo(0)" class="btn color_secondary sw-btn-guardar text-white"
                                    style="display: none;border-radius: 7px; border: 1px solid white;"
                                    type="button">Guardar</button>

                                <button onclick="addModulo(1)" class="btn color_tertiary sw-btn-submit text-black"
                                    style="display: none;border-radius: 7px; border: 1px solid white;"
                                    type="button">Publicar</button>
                            </div>
                            {{!-- BOTONES --}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    // Obtener elementos del DOM
    const lessonsContainer = document.getElementById('contenedor-lecciones');
    let lessonCounter = 1, lecciones_temp = [];

    document.addEventListener("DOMContentLoaded", function () {
        const leccionInput = document.getElementById("leccion_0");
        const accordionHeader = document.querySelector(".accordion__header--text");

        // Agregar evento blur al campo de entrada
        leccionInput.addEventListener("keyup", function () {
            const nuevoNombreLeccion = leccionInput.value;
            accordionHeader.textContent =
                nuevoNombreLeccion !== "" ? nuevoNombreLeccion : "Lección 0";
        });

        // Inicializa SortableJS
        const sortable = new Sortable(lessonsContainer, {
            animation: 150,
            onEnd: () => {
                actualizar_posicionLecciones();
            },
        });
       
        // Función para crear el HTML de una nueva lección
        const createLessonHTML = () => {
            const lessonHTML = `
            <div class="accordion__item" data-lesson-id="${lessonCounter}">
                <div class="accordion__header" data-toggle="collapse" data-target="#bordered_collapse_${lessonCounter}" style="margin-left: -15px;">
                    <span class="accordion__header--text">Lección por defecto ${lessonCounter}</span>
                    <span class="accordion__header--indicator"></span>
                </div>
            <div id="bordered_collapse_${lessonCounter}" class="collapse accordion__body show" data-parent="#contenedor-lecciones" style="margin-left: -15px;">
                <div class="accordion__body--text">
                <!-- Contenido de la nueva lección -->
                <div class="row">
                        <div class="col-lg-8 mb-2">
                            <div class="form-group">
                                <label class="text-label">Nombre de la lección*</label>
                                <input type="text" id="leccion_${lessonCounter}" class="form-control" style="border: 1px solid #DBDBDB;" value="Lección por defecto ${lessonCounter}">
                            </div>
                        </div>
                    </div>
                <!-- --- -->
                <div class="row" id="divRow-${lessonCounter}">
                    <div class="col-6">
                        <label class="text-label">Video de la lección*</label>
                        <div class="drag-area file-videoleccion file-leccion" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)" ondrop="dropHandler(event)">
                            <center>
                                <button id="btnvideoleccion_${lessonCounter}" onclick="btnFile_(event, this.parentNode)" style="border: 1px solid #ffffff00;background: #f0f8ff00;background-repeat: round;">
                                    <img src="../img/thumbnail.svg" alt="" style="width: 121px; margin-top: -37px;">
                                </button>
                                <input type="file" class="fileVideo_" id="video_${lessonCounter}" onchange="fileChange_(event, event.target)" hidden>
                            </center>
                            <h6 class="fw-700 text-black">Escoge o <span style="color:#812082;font-weight: 700;font-size: 14px;">arrastra </span>un archivo</h6>
                        </div>
                        <div id="msgFile-video_${lessonCounter}" class="col-12"></div>
                    </div>
                    <div class="col-6 pt-4">
                        <div id="portada-video_${lessonCounter}">
                            <img src="../img/Leccion-por-defecto.jpg" width="250" alt="Video por defecto">
                        </div>
                    </div>
                </div>
                <br>
                <!-- --- -->
                <!-- Summernote -->
                <div class="row">
                    <div class="col-xl-12 col-xxl-12">
                    <label class="text-label">Descripción de la lección</label>
                    <div class="summernote-theme-1">
                        <textarea name="name" class="summernote" id="summernote_${lessonCounter}" rows="10"></textarea>
                    </div>
                    </div>
                </div>
                <!-- --- -->
                <br>
                <div class="row" style="display: grid;">
                    <div class="col-6">
                    <label class="text-label">Material descargable</label>
                    <div class="drag-area file-material file-leccion" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)" ondrop="dropHandler(event)">
                        <center>
                            <button id="btnMaterial_${lessonCounter}" onclick="btnFile_(event, this.parentNode)" style="border: 1px solid #ffffff00;background: #f0f8ff00;background-repeat: round;">
                                <img src="../img/thumbnail.svg" alt="" style="width: 121px; margin-top: -37px;">
                            </button>
                            <input type="file" class="fileMaterial_" id="material_${lessonCounter}" onchange="fileChange_(event, event.target)" hidden>
                        </center>
                        <h6 class="fw-700 text-black">Escoge o <span style="color:#812082;font-weight: 700;font-size: 14px;">arrastra </span>un archivo</h6>
                    </div>
                    </div>
                    <div id="msgFile-material_${lessonCounter}" class="col-12"></div>
                    </div>
                    <br>
                    <br>
                    <button id="addLessonBtn" class="btn btn-danger text-white" style="border-radius: 7px; padding: 6px 30px;" type="button" onclick="deleteLesson(${lessonCounter})">Eliminar</button>
                </div>
            </div>
            </div>
        `;
            return lessonHTML;
        };

        const handleAddLesson = () => {
            const lessonHTML = createLessonHTML();
            lessonsContainer.insertAdjacentHTML("beforeend", lessonHTML);

            // Encuentra el elemento de texto Summernote utilizando el ID generado dinámicamente
            const newSummernoteElement = document.getElementById(
                `summernote_${lessonCounter}`
            );

            // Inicializa Summernote para el nuevo elemento
            $(newSummernoteElement).summernote({
                height: 190,
            });
            lessonCounter++;

            actualizar_posicionLecciones();
        };

        // Actualizar el nombre de las lecciones en vivo *
        const updateAccordionHeaderText = (lessonIndex, text) => {
            const accordionHeader = lessonsContainer.querySelector(`.accordion__item .accordion__header[data-target="#bordered_collapse_${lessonIndex}"] .accordion__header--text`);
            if (accordionHeader) {
                accordionHeader.textContent = text;
            }
        };

        lessonsContainer.addEventListener("input", function (event) {
            const inputElement = event.target;
            if (inputElement.matches('[id^="leccion_"]')) {
                const lessonIndex = inputElement.id.split("_")[1];
                const newHeaderText = inputElement.value !== "" ? inputElement.value : `Lección ${lessonIndex}`;
                updateAccordionHeaderText(lessonIndex, newHeaderText);
            }
        });

        lessonsContainer.addEventListener("keyup", function (event) {
            const inputElement = event.target;
            if (inputElement.matches('[id^="leccion_"]')) {
                const lessonIndex = inputElement.id.split("_")[1];
                const newHeaderText = inputElement.value !== "" ? inputElement.value : `Lección ${lessonIndex}`;
                updateAccordionHeaderText(lessonIndex, newHeaderText);
            }
        });
        // *

        const addLessonBtn = document.getElementById("addLessonBtn");
        addLessonBtn.addEventListener("click", handleAddLesson);
    });

    async function addModulo(estado) {
        let msg = '¿Quieres guardar este módulo como un borrador?'
        if (estado == 1) msg = '¿Estás seguro que deseas publicar este módulo?'
        const modulo = $("#modulo").val();
        const categoria = $("#categoriaHiddenModulo").val();
        const insignia = $("#insignia").val();
        const nombre_insignia = $("#nombre_insignia").val();
        const programa = $(".programa:checked").map(function () {
            return $(this).val();
        }).get();
        const thumbnailInput = document.getElementById("fileThumbnail")
        const miniatura = thumbnailInput.files[0];
        Swal.fire({
            title: msg,
            showCancelButton: true,
            confirmButtonText: 'Confirmar',
            confirmButtonColor: "#812082",
        }).then((result) => {
            if (result.isConfirmed) {
                const formData = new FormData();
                formData.append('lecciones_size', lecciones_temp.length);
                formData.append('nombre', modulo);
                formData.append('insignia', insignia);
                formData.append('nombre_insignia', nombre_insignia);
                formData.append('categoria', categoria);
                // Iterar sobre cada valor del array programa y agregarlo individualmente
                programa.forEach(valor => {
                    formData.append('programa[]', valor);
                });
                formData.append('miniatura', miniatura);
                formData.append('estado', estado);

                let isOk = true;
                for (let i = 0; i < lecciones_temp.length; i++) {
                    const leccion = lecciones_temp[i];
                    formData.append(`nombre_${i}`, leccion.nombre);
                    formData.append(`video_${i}`, leccion.video);
                    formData.append(`descripcion_${i}`, leccion.descripcion);
                    formData.append(`duracion_${i}`, leccion.duracion);
                    formData.append(`material_${i}`, leccion.material);
                }

                if (isOk) {
                    fetch('/guardar-modulo', {
                        method: 'POST',
                        body: formData,
                        headers: { 'enctype': 'multipart/form-data' }
                    })
                        .then(response => {
                            if (response) location.href = '/ver-modulos'
                            else Swal.fire('Error!', 'Error al guardar el módulo, intenta más tarde.', 'error')
                        })
                        .catch(error => {
                            console.log("Error ==> ", error)
                        });
                }
            }
        })

    }

    async function cargarArchivo(file, clase, id) {
        // Si el div para el archivo es el de Video
        if ((clase == 'fileThumbnail_' || clase == 'fileMaterial_') && file.size >= (20 * 1024 * 1024)) { // Validar el tamaño del video - 20 megabytes
            toastError("El archivo no puede superar los 20MB.")
        } else {
            const ext = file.name.split(".").pop().toLowerCase();
            let fileOk = true, id_Msg = 'msgFile-' + id;
            // Validando el tipo de archivo
            if (clase == 'fileThumbnail_') {
                const extensiones = ["jpg", "jpeg", "png", "svg", "psd", "ai", "tiff"];
                id_Msg = 'msgFile-thumbnail'
                // Si el archivo no es una imagen
                if (!extensiones.includes(ext)) {
                    fileOk = false;
                    toastError("Solo se admiten imagenes, intentelo nuevamente.")
                }
            } else if (clase == 'fileVideo_') {
                const extensiones = ['mov', 'mp4', 'avi', 'mkv']
                // Si el archivo no es video
                if (!extensiones.includes(ext)) {
                    fileOk = false;
                    toastError("Solo se admiten videos, intentelo nuevamente.")
                } else {
                    const video = document.createElement("video");
                    video.src = URL.createObjectURL(file);
                    video.style.width = "250px";

                    const divPortada = document.getElementById("portada-"+id);
                    const img = divPortada.querySelector("img");

                    // Eliminar la imagen existente
                    if (img) {
                        img.remove();
                    }

                    if (divPortada.querySelector("video")) {
                        divPortada.querySelector("video").remove();
                    }
                    // Agregar el video al div
                    divPortada.appendChild(video);
                }
            }
            // Funcionamiento para subir Archivos (y si es un video, debe pesar menos de 20 MB)
            if (fileOk) {
                try {
                    const fileReader = new FileReader();
                    fileReader.addEventListener("load", async () => {
                        $('#'+id_Msg).html('<span class="success">Archivo cargado exitosamente...</span>');
                    })
                    fileReader.readAsDataURL(file);
                    console.log("File Todo OK: ", file)
                } catch (error) {
                    // Código que se ejecuta en caso de error
                    console.log('Ha ocurrido un error:', error.message);
                    toastError("Ocurrio algo inesperado al subir el archivo")
                }
            }
        }
    }

    // Borrar lecciones creadas 
    const deleteLesson = (lessonNumber) => {
        lecciones_temp = lecciones_temp.filter((leccion) => leccion.id !== lessonNumber);
        console.log("lecciones_final ==> ", lecciones_temp)
        const lessonElement = document.getElementById(`bordered_collapse_${lessonNumber}`).parentNode;
        lessonElement.remove();
        guardarYMostrarDatos('guardar');
    };

    function validarDatos() {
        const modulo = $("#modulo").val();
        const programa = $(".programa:checked").map(function () {
            return $(this).val();
        }).get();
        const nombre_insignia = $('#nombre_insignia').val()
        const insignia = $('#insignia').val()
        const categoria = $('#categoriaHiddenModulo').val()
        const thumbnail = (document.getElementById("fileThumbnail")).files[0];

        if (modulo == '' || insignia == '' || nombre_insignia == '' || categoria == '' || programa.length === 0 || !thumbnail) {
            Swal.fire('Error!', 'Hay campos vacíos en la configuración del módulo.', 'info')
        } else {
            $("#btnNextStep").trigger("click");
        }
    }
    
    // Guardar y mostrar datos para la vista previa del formulario 
    function guardarYMostrarDatos(etiqueta = null) {
        const modulo = $("#modulo").val();
        const programa = $(".programa:checked").map(function () {
            return $(this).val();
        }).get();
        const thumbnail = (document.getElementById("fileThumbnail")).files[0];

        const programNames = {
            "1": "Free Trial",
            "2": "Entrepreneur",
            "3": "Business",
            "4": "Enterprise",
            "5": "Accelerate",
            "6": "Por compra",
            "7": "NAR",
        };

        let htmlContent = '';
        for (const [number, program] of Object.entries(programNames)) {
            if (programa.includes(number)) {
                htmlContent += `<div style="display: inline-block;"><h6 class="mb-1">${program} </h6></div>`;
                if (programa.indexOf(number) < programa.length - 1) {
                    htmlContent += ', '; // Agregar coma si hay más programas después
                }
            }
        }

        const insignia = {
            link: $("#insignia").val(),
            nombre: $("#nombre_insignia").val()
        }
        
        // Crear un objeto FileReader para leer la imagen como URL
        let reader = new FileReader();
        // Leer la imagen como URL
        if (thumbnail) {
            reader.readAsDataURL(thumbnail);
        }

        // Cuando se cargue la imagen, asignarla a la variable miniatura
        reader.onload = function (event) {
            const miniatura = event.target.result;
            const hash = etiqueta || window.location.hash.substring(1)
            procesarDatos_modulo(modulo, htmlContent, insignia, miniatura, hash)
        };
    }

    async function procesarDatos_modulo(modulo, programas, insignia, miniatura, hash = null) {
        let contenido = `<br>
        <div class="row">
            <div class="col-6">
                <h4 class="text-black">Módulo</h4>
                ${modulo}<br><br>
                <h4 class="text-black">Programa</h4>
                ${programas}<br><br>
                <h4 class="text-black">Insignia</h4> 
                <a href="${insignia.link}" target="_blank" style="text-decoration: underline;">${insignia.nombre}</a>
            </div> 
            <div class="col-6" style="margin-top: -65px;"><h4 class="text-black" style="text-align: center;">Thumbnail</h4>
                <img src="${miniatura}" alt="Insignia del módulo" style="margin-left: 40%;width: 276px;">
            </div>
        </div>`;

        if (hash == 'guardar') {
            for (let i = 0; i < lessonCounter; i++) {
                const nombre = $(`#leccion_${i}`).val();

                if (nombre) {
                    const videoInput = document.getElementById(`video_${i}`);
                    const video = (videoInput && videoInput.files.length > 0) ? videoInput.files[0] : false;
                    // Obtener la duración del video usando la función asincrónica
                    const duracion = await cargarLaDuracion(video);
                    const descripcion = $(`#summernote_${i}`).val();
                    let material = {name: 'Sin material'};
                    const materialInput = document.getElementById(`material_${i}`);
                    if (materialInput.files.length > 0) { material = materialInput.files[0]; }

                    const newLeccion = {
                        id: i,
                        nombre,
                        video,
                        descripcion,
                        material,
                        duracion
                    };

                    const existeLeccionIndex = lecciones_temp.findIndex((leccion) => leccion.id === newLeccion.id);
                    if (existeLeccionIndex === -1) {
                        lecciones_temp.push(newLeccion); // Agregar la lección al array solo si no existe
                    } else {
                        // Si la lección ya existe, actualizarla con los nuevos datos
                        lecciones_temp[existeLeccionIndex] = newLeccion;
                    }
                };

            }
        }

        // Obtener el elemento div donde mostraremos los datos
        let divResultado = document.getElementById("resultado");

        // Agregar las lecciones dinámicas a la tabla
        contenido += `<br>
            <div class="table-responsive">
                <h4 class="text-black">Lecciones</h4>
                <table class="table table-hover table-responsive-sm">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>VIDEO</th>
                            <th>LECCIÓN</th>
                            <th>DESCARGABLES</th>
                            <th>DURACIÓN</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        console.log("LECCIONES TEMP -+-+ ")
        console.log(lecciones_temp)
        console.log(" xxx")


        lecciones_temp.forEach((leccion, index) => {
            let portada = `<img src="../img/Leccion-por-defecto.jpg" width="162px" alt="Video por defecto">`
            if (leccion.video) {
                const videoElement = document.createElement("video");
                videoElement.src = URL.createObjectURL(leccion.video);
                videoElement.style.width = "162px";
                portada = videoElement.outerHTML
            }

            contenido += `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${portada}</td>
                        <td>${leccion.nombre}</td>
                        <td>${leccion.material.name}</td>
                        <td>${leccion.duracion}</td>
                    </tr>
                `;
        });
        contenido += `
                    </tbody>
                </table>
            </div>
        `;

        // Mostrar los datos en el elemento div
        divResultado.innerHTML = contenido;
    }

    //Actualizar posiciones de las lecciones
    const actualizar_posicionLecciones = () => {
        const lessonItems = lessonsContainer.querySelectorAll('.accordion__item');
        const newLeccionesTemp = [];
        lessonItems.forEach((item, index) => {
            const lessonId = item.getAttribute('data-lesson-id');
            const lessonIndex = lecciones_temp.findIndex((leccion) => leccion.id.toString() === lessonId);

            if (lessonIndex !== -1) {
                newLeccionesTemp.push(lecciones_temp[lessonIndex]);
            }
        });
        console.log('Antiguo orden de lecciones_temp:');
        console.log(lecciones_temp);
        lecciones_temp = newLeccionesTemp;
        console.log('Nuevo orden de lecciones_temp:');
        console.log(lecciones_temp);
        guardarYMostrarDatos('guardar');
    };
</script>