<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
<script>
    function ocultar_DivIzq() {
        $('#icono-noVerDiv').hide()
        $('#icono-verDiv').show()
        $('#col_izq').hide()
        $('#col_der').removeClass('col-xl-8')
        $('#col_der').addClass('col-xl-12')
    }
    function mostrar_DivIzq() {
        $('#icono-verDiv').hide()
        $('#icono-noVerDiv').show()
        $('#col_izq').show()
        $('#col_der').removeClass('col-xl-12')
        $('#col_der').addClass('col-xl-8')
    }
    
    // => FUNCIONES PARA LAS TAREAS DE PLAN EMPRESARIAL
    function addTaskToList_Empresarial(id, actividad, fecha_inicio, fecha_entrega) {
        return `
        <tr>
            <td>${actividad}</td>
            <td>N/A</td>
            <td class="text-primary font-w600" style="font-size: 14px;">Pendiente</td>
            <td>
                <div style="width:100% ; margin-left: -8px;font-size: 8px;height: 15px; text-align: center;color: white;background: #ada7a7;border-radius: 7px;">
                    ${fecha_inicio} - ${fecha_entrega}
                    <div class="progress-bar progress-bar-striped progress-bar-animated"
                        style="width:0%;height: 16px;margin-top: -13px;"></div>
                </div>
            </td>
            <td class="text-white" style="background: #585858;font-size: 11px; text-align:center">Sin especificar</td>
            <td>
                <div class="d-flex justify-content-center align-items-center">
                    <a onclick="editarTarea_Empresarial(${id})" title="Editar"
                        class="btn btn-primary shadow btn-xs sharp mr-1"
                        style="background: linear-gradient(189.55deg, #FED061 -131.52%, #812082 -11.9%, #50368C 129.46%);"><i
                            style="color:white ;" class="fa fa-pencil"></i>
                    </a>
                    <a onclick="eliminarTarea(${id}, 1)" title="Eliminar" class="btn btn-danger shadow btn-xs sharp"
                        style="background: #DC0000;"><svg xmlns="http://www.w3.org/2000/svg"
                            width="12px" viewBox="0 0 448 512">
                            <path
                                d="M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96 64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z"
                                fill="white" />
                        </svg>
                    </a>
                </div>
            </td>
        </tr>
        `
    }

    function agregarTarea_Empresarial() {
        const actividad = $("#actividad-empresarial").val();
        const fecha_inicio = $("#fecha_inicio-empresarial").val();
        const fecha_entrega = $("#fecha_entrega-empresarial").val();
        const nombreEmpresa = $("#nombreEmpresa").text();
        const email = $("#emailEmpresa").text();

        let fechaini, fechafin;
        fechaini = new Date(fecha_inicio);
        fechaini = fechaini.getTime();
        fechaini = (((fechaini / 1000) / 60) / 60) / 24
        fechafin = new Date(fecha_entrega);
        fechafin = fechafin.getTime();
        fechafin = (((fechafin / 1000) / 60) / 60) / 24

        if(fechaini > fechafin){
            toastr.warning("La fecha de finalización no puede ser inferior a la fecha de inicio", "Atención", {
                positionClass: "toast-top-full-width",
                timeOut: 3e3,
                closeButton: !0,
                debug: !1,
                newestOnTop: !0,
                progressBar: !0,
                preventDuplicates: !0,
                onclick: null,
                showDuration: "200",
                hideDuration: "200",
                extendedTimeOut: "200",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
                tapToDismiss: !1
            })
        } else if (actividad == '' || fecha_inicio == '' || fecha_entrega == '') {
            toastr.warning("Hay campos vacíos", "Atención", {
                positionClass: "toast-top-full-width",
                timeOut: 3e3,
                closeButton: !0,
                debug: !1,
                newestOnTop: !0,
                progressBar: !0,
                preventDuplicates: !0,
                onclick: null,
                showDuration: "200",
                hideDuration: "200",
                extendedTimeOut: "200",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
                tapToDismiss: !1
            })
        } else {
            // Activar Sidebar
            $('#sidebarEmpresarial').addClass('active');
            $('#cuerpoGeneral').css('overflow-y', 'hidden')
            $('#tiempoTxt-sidebar1').text('A tiempo')

            // CAMPOS FUERA DEL SIDEBAR
            $("#actividad-empresarial").val('');
            $("#fecha_inicio-empresarial").val('');
            $("#fecha_entrega-empresarial").val('');

            // Enviar info a la base de datos
            const empresa = $("#idEmpresa").val();
            const data = JSON.stringify({ actividad, fecha_inicio, fecha_entrega, empresa, nombreEmpresa, email })
            fetch('/agregarTarea', {
                method: 'POST',
                body: data,
                headers: {'Content-Type': 'application/json'}
            }).then(res => res.json())
            .catch(error => console.error('Error Agregar Tarea: ', error))
            .then(response => {
                if (response) {
                    const idTarea = response.insertId
                    const itemTaskList = addTaskToList_Empresarial(idTarea, actividad, fecha_inicio, fecha_entrega)
                    $('#cuerpoTareasEmpresarial').prepend(itemTaskList);
                    $('#actividad-sidebar1').val(actividad)
                    $('#estado1').val(0)
                    $('#prioridad1').val(0)
                    $('#idTarea-sidebar1').val(idTarea)
                    $('#fechaIni-sidebar1').val(fecha_inicio)
                    $('#fechaFin-sidebar1').val(fecha_entrega)

                } else {
                    toastr.warning("Hubo una inconsistencia al agregar la tarea.", "Error", {
                        positionClass: "toast-top-full-width",
                        timeOut: 3e3,
                        closeButton: !0,
                        debug: !1,
                        newestOnTop: !0,
                        progressBar: !0,
                        preventDuplicates: !0,
                        onclick: null,
                        showDuration: "200",
                        hideDuration: "200",
                        extendedTimeOut: "200",
                        showEasing: "swing",
                        hideEasing: "linear",
                        showMethod: "fadeIn",
                        hideMethod: "fadeOut",
                        tapToDismiss: !1
                    })
                }
            });
        }
    }

    function editarTarea_Empresarial(idTarea){
        const listaComentarios = document.querySelector('#listaComentarios1')
        listaComentarios.innerHTML = ''
        $("#comentario1").val("");
        const tiempo = $('#tiempo-sidebar1')
        tiempo.css('display', 'none')
        $('#tiempoTxt-sidebar1').text('A tiempo')
        $('#sidebarEmpresarial').addClass('active');
        $('#cuerpoGeneral').css('overflow-y', 'hidden')
        fetch('/editarTarea', {
            method: 'POST',
            body: JSON.stringify({idTarea, item:1}),
            headers: {'Content-Type': 'application/json'}
        }).then(res => res.json())
        .catch(error => console.error('Error Editar Tarea: ', error))
        .then(r => {
            console.group("Info de la Tarea: ")
            console.log(r)
            console.log('---')
            console.groupEnd()
            $("#idEmpresa").val(r.empresa)
            $('#idTarea-sidebar1').val(idTarea)
            $('#actividad-sidebar1').val(r.actividad)
            $('#responsable-sidebar1').val(r.responsable)
            $("#descripcion-sidebar1").val(r.descripcion)
            $("#responsable-sidebar1").val(r.responsable)
            $('#fechaIni-sidebar1').val(r.fecha_inicio)
            $('#fechaFin-sidebar1').val(r.fecha_entrega)
            $("#estado1").val(r.estado)
            $("#prioridad1").val(r.prioridad)

            const comentarios = JSON.parse(r.mensajes)
            if (comentarios) {
                $('#divComentarios1').css('display', 'inline-block')
                comentarios.forEach(x => {
                    listaComentarios.innerHTML += `
                        <li>
                            <div class="timeline-badge primary"></div>
                            <a class="timeline-panel text-muted">
                                <span class="fechaMensajes">${x.fecha}</span>
                                <h6 class="mb-0 txtSidebar">${x.mensaje}<br>
                                    <span class="txtYellow">${x.nombres} ${x.apellidos} - ${x.rol}</span>
                                </h6>
                            </a>
                        </li>
                    `
                })
            } else {
                $('#divComentarios1').css('display', 'none')
            }

            if (r.estado == 0 || r.estado == 1) {
                tiempo.css('display', 'inline-block')
                const fechaActual = new Date().toLocaleDateString('fr-CA')
                $('#tiempoTxt-sidebar1').text('A tiempo')
                if (fechaActual > r.fecha_entrega){
                    $('#tiempoTxt-sidebar1').text('Retrasada')
                }
            }
        })
    }

    function actualizarTarea_Empresarial() {
        const empresa = $("#idEmpresa").val();
        const email = $("#emailEmpresa").text();
        const idTarea = $("#idTarea-sidebar1").val();
        const actividad = $("#actividad-sidebar1").val();
        const responsable = $("#responsable-sidebar1").val();
        const descripcion = $("#descripcion-sidebar1").val();
        let fecha_inicio = $("#fechaIni-sidebar1").val();
        let fecha_entrega = $("#fechaFin-sidebar1").val();
        const prioridad = $("#prioridad1").val();
        const estado = $("#estado1").val();

        let fechaini, fechafin
        fechaini = new Date(fecha_inicio);
        fechaini = fechaini.getTime();
        fechaini = (((fechaini / 1000) / 60) / 60) / 24
        fechafin = new Date(fecha_entrega);
        fechafin = fechafin.getTime();
        fechafin = (((fechafin / 1000) / 60) / 60) / 24

        if(fechaini > fechafin){
            toastr.warning("La fecha de finalización no puede ser inferior a la fecha de inicio", "Atención", {
                positionClass: "toast-top-full-width",
                timeOut: 3e3,
                closeButton: !0,
                debug: !1,
                newestOnTop: !0,
                progressBar: !0,
                preventDuplicates: !0,
                onclick: null,
                showDuration: "200",
                hideDuration: "200",
                extendedTimeOut: "200",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
                tapToDismiss: !1
            })
        } else {
            const data = JSON.stringify({ idTarea, empresa, actividad, descripcion, responsable, fecha_inicio, fecha_entrega, estado, email, prioridad, item:1 })
            fetch('/actualizarTarea', {
                method: 'POST',
                body: data,
                headers: {'Content-Type': 'application/json'}
            }).then(res => res.json())
            .catch(error => console.error('Error Actualizar Tarea: ', error))
            .then(response => {
                location.hash = '#plan-empresarial';
                location.reload(true)
            })
        }
    }

    // => FUNCIONES PARA LAS TAREAS DE PLAN ESTRATÉGICO
    function addTaskToList(id, fecha_inicio, fecha_entrega, dimension) {
        return `
        <tr>
            <td>N/A</td>
            <td>${dimension}</td>
            <td class="text-primary font-w600" style="font-size: 14px;">Pendiente</td>
            <td>
                <div style="width:100% ; margin-left: -8px;font-size: 8px;height: 15px; text-align: center;color: white;background: #ada7a7;border-radius: 7px;">
                    ${fecha_inicio} - ${fecha_entrega}
                    <div class="progress-bar progress-bar-striped progress-bar-animated"
                        style="width:0%;height: 16px;margin-top: -13px;"></div>
                </div>
            </td>
            <td class="text-white" style="background: #585858;font-size: 11px; text-align:center">Sin especificar</td>
            <td>
                <div class="d-flex justify-content-center align-items-center">
                    <a onclick="editarTarea(${id})" title="Editar"
                        class="btn btn-primary shadow btn-xs sharp mr-1"
                        style="background: linear-gradient(189.55deg, #FED061 -131.52%, #812082 -11.9%, #50368C 129.46%);"><i
                            style="color:white ;" class="fa fa-pencil"></i>
                    </a>
                    <a onclick="eliminarTarea(${id}, 2)" title="Eliminar" class="btn btn-danger shadow btn-xs sharp"
                        style="background: #DC0000;"><svg xmlns="http://www.w3.org/2000/svg"
                            width="12px" viewBox="0 0 448 512">
                            <path
                                d="M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96 64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z"
                                fill="white" />
                        </svg>
                    </a>
                </div>
            </td>
        </tr>
        `
    }

    function agregarTarea() {
        const nombreEmpresa = $("#nombreEmpresa").text();
        const email = $("#emailEmpresa").text();
        const actividad = $("#actividad-estrategico").val();
        const fecha_inicio = $("#fecha_inicio-estrategico").val();
        const fecha_entrega = $("#fecha_entrega-estrategico").val();
        const dimension = $("#dimension").val()

        let fechaini, fechafin;
        fechaini = new Date(fecha_inicio);
        fechaini = fechaini.getTime();
        fechaini = (((fechaini / 1000) / 60) / 60) / 24
        fechafin = new Date(fecha_entrega);
        fechafin = fechafin.getTime();
        fechafin = (((fechafin / 1000) / 60) / 60) / 24

        if(fechaini > fechafin){
            toastr.warning("La fecha de finalización no puede ser inferior a la fecha de inicio", "Atención", {
                positionClass: "toast-top-full-width",
                timeOut: 3e3,
                closeButton: !0,
                debug: !1,
                newestOnTop: !0,
                progressBar: !0,
                preventDuplicates: !0,
                onclick: null,
                showDuration: "200",
                hideDuration: "200",
                extendedTimeOut: "200",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
                tapToDismiss: !1
            })
        } else if (actividad == '' || fecha_inicio == '' || fecha_entrega == '' || dimension == '') {
            toastr.warning("Hay campos vacíos", "Atención", {
                positionClass: "toast-top-full-width",
                timeOut: 3e3,
                closeButton: !0,
                debug: !1,
                newestOnTop: !0,
                progressBar: !0,
                preventDuplicates: !0,
                onclick: null,
                showDuration: "200",
                hideDuration: "200",
                extendedTimeOut: "200",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
                tapToDismiss: !1
            })
        } else {
            // Activar Sidebar
            $('#sidebarEstrategico').addClass('active');
            $('#cuerpoGeneral').css('overflow-y', 'hidden');
            $("#tiempoTxt-sidebar2").text("A tiempo")
            $("#comentario2").val("");

            // Fuera del Sidebar
            $('#actividad2').val(''); 
            $('#fecha_inicio-estrategico').val('');
            $('#fecha_entrega-estrategico').val(''); 
            $('#dimension').val('');

            // Enviar info a la base de datos
            const empresa = $("#idEmpresa").val();
            const data = JSON.stringify({ actividad, fecha_inicio, fecha_entrega, dimension, empresa, nombreEmpresa, email })

            fetch('/agregarTarea', {
                method: 'POST',
                body: data,
                headers: {'Content-Type': 'application/json'}
            }).then(res => res.json())
            .catch(error => console.error('Error Agregar Tarea: ', error))
            .then(response => {
                if (response) {
                    const idTarea = response.insertId
                    const itemTaskList = addTaskToList(idTarea, fecha_inicio, fecha_entrega, dimension)
                    $('#cuerpoTareas').prepend(itemTaskList);
                    $('#estado2').val(0)
                    $('#prioridad2').val(0)
                    $('#idTarea-sidebar2').val(idTarea)
                    $('#actividad-sidebar2').val(actividad)
                    $('#dimension-sidebar2').val(dimension)
                    $('#fechaIni-sidebar2').val(fecha_inicio)
                    $('#fechaFin-sidebar2').val(fecha_entrega)
                    $('#responsable-sidebar2').val('')
                } else {
                    toastr.warning("Hubo una inconsistencia al agregar la tarea.", "Error", {
                        positionClass: "toast-top-full-width",
                        timeOut: 3e3,
                        closeButton: !0,
                        debug: !1,
                        newestOnTop: !0,
                        progressBar: !0,
                        preventDuplicates: !0,
                        onclick: null,
                        showDuration: "200",
                        hideDuration: "200",
                        extendedTimeOut: "200",
                        showEasing: "swing",
                        hideEasing: "linear",
                        showMethod: "fadeIn",
                        hideMethod: "fadeOut",
                        tapToDismiss: !1
                    })
                }
            });
        }
    }

    function editarTarea(idTarea){
        const listaComentarios = document.querySelector('#listaComentarios2')
        listaComentarios.innerHTML = ''
        $("#comentario2").val("");
        const tiempo = $('#tiempo-sidebar2')
        tiempo.css('display', 'none')
        $('#sidebarEstrategico').addClass('active');
        $('#cuerpoGeneral').css('overflow-y', 'hidden');
        fetch('/editarTarea', {
            method: 'POST',
            body: JSON.stringify({idTarea, item:2}),
            headers: {'Content-Type': 'application/json'}
        }).then(res => res.json())
        .catch(error => console.error('Error Editar Tarea: ', error))
        .then(r => {
            $('#idEmpresa').val(r.empresa)
            $('#idTarea-sidebar2').val(idTarea)
            $('#actividad-sidebar2').val(r.actividad)
            $('#responsable-sidebar2').val(r.responsable)
            $('#descripcion-sidebar2').val(r.descripcion)
            $('#fechaIni-sidebar2').val(r.fecha_inicio)
            $('#fechaFin-sidebar2').val(r.fecha_entrega)
            $('#dimension-sidebar2').val(r.dimension)
            $('#estado2').val(r.estado)
            $('#prioridad2').val(r.prioridad)

            const comentarios = JSON.parse(r.mensajes)
            if (comentarios) {
                $('#divComentarios2').css('display', 'inline-block')
                comentarios.forEach(x => {
                    listaComentarios.innerHTML += `
                        <li>
                            <div class="timeline-badge primary"></div>
                            <a class="timeline-panel text-muted">
                                <span class="fechaMensajes">${x.fecha}</span>
                                <h6 class="mb-0 txtSidebar">${x.mensaje}<br>
                                    <span class="txtYellow">${x.nombres} ${x.apellidos} - ${x.rol}</span>
                                </h6>
                            </a>
                        </li>
                    `
                })
            } else {
                $('#divComentarios2').css('display', 'none')
            }

            if (r.estado == 0 || r.estado == 1) {
                tiempo.css('display', 'inline-table')
                const fechaActual = new Date().toLocaleDateString('fr-CA')
                $('#tiempoTxt-sidebar2').text('A tiempo')
                if (fechaActual > r.fecha_entrega){
                    $('#tiempoTxt-sidebar2').text('Retrasada')
                }
            }
        })
    }

    function actualizarTarea() {
        const empresa = $("#idEmpresa").val();
        const email = $("#emailEmpresa").text();
        const listaComentarios = document.querySelector('#listaComentarios2')
        listaComentarios.innerHTML = ''
        $('#divComentarios2').css('display', 'none')
        const idTarea = $("#idTarea-sidebar2").val();
        const actividad = $("#actividad-sidebar2").val();
        const responsable = $("#responsable-sidebar2").val();
        const descripcion = $("#descripcion-sidebar2").val();
        let fecha_inicio = $("#fechaIni-sidebar2").val();
        let fecha_entrega = $("#fechaFin-sidebar2").val();
        const dimension = $("#dimension-sidebar2").val();
        const prioridad = $("#prioridad2").val();
        const estado = $("#estado2").val();
        let fechaini, fechafin

        fechaini = new Date(fecha_inicio);
        fechaini = fechaini.getTime();
        fechaini = (((fechaini / 1000) / 60) / 60) / 24
        fechafin = new Date(fecha_entrega);
        fechafin = fechafin.getTime();
        fechafin = (((fechafin / 1000) / 60) / 60) / 24

        if(fechaini > fechafin){
            toastr.warning("La fecha de finalización no puede ser inferior a la fecha de inicio", "Atención", {
                positionClass: "toast-top-full-width",
                timeOut: 3e3,
                closeButton: !0,
                debug: !1,
                newestOnTop: !0,
                progressBar: !0,
                preventDuplicates: !0,
                onclick: null,
                showDuration: "200",
                hideDuration: "200",
                extendedTimeOut: "200",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
                tapToDismiss: !1
            })
        } else {
            const data = JSON.stringify({ idTarea, empresa, actividad, responsable, descripcion, fecha_inicio, fecha_entrega, dimension, estado, email, prioridad, item:2 })
            fetch('/actualizarTarea', {
                method: 'POST',
                body: data,
                headers: {'Content-Type': 'application/json'}
            }).then(res => res.json())
            .catch(error => console.error('Error Actualizar Tarea: ', error))
            .then(response => {
                location.hash = '#plan-estrategico';
                location.reload(true)
            })
        }
    }

    /*************************************************************************/
    function eliminarTarea(idTarea, item) {
        Swal.fire({
            title: '¿Deseas eliminar la tarea?',
            text: "Esta acción no es reversible.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#50368C',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Cancelar',
            confirmButtonText: '¡Sí, eliminar!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/eliminarTarea', {
                    method: 'POST',
                    body: JSON.stringify({idTarea, item}),
                    headers: {'Content-Type': 'application/json'}
                }).then(res => res.json())
                .catch(error => console.error('Error Eliminar Tarea: ', error))
                .then(response => {
                    item == 1 ? location.hash = '#plan-empresarial' : location.hash = '#plan-estrategico';
                    location.reload(true)
                })
            }
        })
    }

    /*************************************************************************/
    // => Función para el envio de los comentarios a la base de datos
    function addComentario(item) {
        const comentario = $("#comentario"+item).val();
        const idTarea = parseInt($("#idTarea-sidebar"+item).val())
        const listaComentarios = document.getElementById('listaComentarios'+item)
        $('#divComentarios'+item).css('display', 'inline-block')
        const btnComentario = document.getElementById('btnComentario'+item)

        let datosUsuario = document.getElementById('datosUsuario').value
        datosUsuario = JSON.parse(datosUsuario)
        const consultor = datosUsuario.nombres +' '+ datosUsuario.apellidos
        const fecha = new Date().toLocaleDateString("en-US")

        listaComentarios.innerHTML += `
            <li class="animate__animated animate__fadeInUp">
                <div class="timeline-badge primary"></div>
                <a class="timeline-panel text-muted">
                    <span class="fechaMensajes">${fecha}</span>
                    <h6 class="mb-0 txtSidebar">${comentario}<br>
                        <span class="txtYellow">${consultor} - ${datosUsuario.rol}</span>
                    </h6>
                </a>
            </li> 
        `

        fetch('/comentarioTareas', {
            method: 'POST',
            body: JSON.stringify({comentario, idTarea, fecha, item}),
            headers: {'Content-Type': 'application/json'}
        }).then(res => res.json())
        .catch(error => console.error('Error:', error))
        .then(response => {
            if (response){
                document.getElementById("comentario"+item).value = "";
            } else {
                const msg = "Ocurrió un error inesperado al agregar el mensaje por favor recargue la página e intente nuevamente. Si el error persiste contactar a soporte."
                console.log("\n"+msg+"\n");
                document.getElementById("comentario"+item).value = msg;
            }
        });
    }

    /*************************************************************************/
    function finalizarEtapa_Empresarial(codigo) {
        Swal.fire({
            title: '¿Deseas marcar el Plan Empresarial como finalizado?',
            html: 'La empresa recibirá una notificación de esto.</br>' +
                'Esta acción no se puede deshacer',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#50368C',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Cancelar',
            confirmButtonText: '¡Sí, finalizar!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/finalizarEtapa', {
                    method: 'POST',
                    body: JSON.stringify({codigo}),
                    headers: {'Content-Type': 'application/json'}
                }).then(res => res.json())
                .catch(error => console.error('Error Finalizar Etapa: ', error))
                .then(response => {
                    //item == 1 ? location.hash = '#plan-empresarial' : location.hash = '#plan-estrategico';
                    location.hash = '#plan-empresarial';
                    location.reload(true);
                })
            }
        })
    }

    (function () {

        const dzChartlist = function () {
            const coloresDim = ['#812082', '#f2f2f2'];
			const opciones = {
				legend: false,
				scales: {
					yAxes: [{
						gridLines: {
							display: true
						},
						ticks: {
							beginAtZero: true,
							min: 0, // minimum value
							max: 10 // maximum value
						}
					}],
					xAxes: [{
						gridLines: {
							display: false
						},
						ticks: {
							fontSize: 10
						},
						//barPercentage: 0.5,
						//categoryPercentage: 1,
						//barThickness: 14,
						//maxBarThickness: 10,
						barPercentage: 4,
						categoryPercentage: 4,
						barThickness: 28,
						maxBarThickness: 25,
					}]
				}
			}

            /** GRÁFICA PARA INDICADORES */
            
            const chartAreasVitales = (indicadores, nuevosProyectos) => {
                let dataAreasVitales1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
				let dataPE1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                let dataAreasVitales2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
				let dataPE2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
				
				// PERCEPCIÓN CLIENTE
                const areasVitales = indicadores.areasVitales1
                dataAreasVitales1 = [areasVitales.producto, areasVitales.administracion, areasVitales.talento_humano, areasVitales.finanzas, areasVitales.servicio_cliente, areasVitales.operaciones, areasVitales.ambiente_laboral, areasVitales.innovacion, areasVitales.marketing, areasVitales.ventas]

				if (indicadores.areasVitales2) {
					const areasVitales = indicadores.areasVitales2
                	dataAreasVitales2 = [areasVitales.producto, areasVitales.administracion, areasVitales.talento_humano, areasVitales.finanzas, areasVitales.servicio_cliente, areasVitales.operaciones, areasVitales.ambiente_laboral, areasVitales.innovacion, areasVitales.marketing, areasVitales.ventas]
				}

				// PERCEPCIÓN ESTADÍSTICA
				if (indicadores.pe_Areas1) {
					const pe_Areas = indicadores.pe_Areas1
					dataPE1 = [pe_Areas.producto, pe_Areas.administracion, pe_Areas.talento_humano, pe_Areas.finanzas, pe_Areas.servicio_cliente, pe_Areas.operaciones, pe_Areas.ambiente_laboral, pe_Areas.innovacion, pe_Areas.marketing, pe_Areas.ventas]
				}
				if (indicadores.pe_Areas2) {
					const pe_Areas = indicadores.pe_Areas2
					dataPE2 = [pe_Areas.producto, pe_Areas.administracion, pe_Areas.talento_humano, pe_Areas.finanzas, pe_Areas.servicio_cliente, pe_Areas.operaciones, pe_Areas.ambiente_laboral, pe_Areas.innovacion, pe_Areas.marketing, pe_Areas.ventas]
				}

                if (nuevosProyectos == 1) {
                    opciones.scales.yAxes[0].ticks.max = 5;
                }

				// GRAFICA FECHA INICIO
                if ($('#chartEmpresaAdm_areas1').length > 0) {
                    const chartEmpresa = document.getElementById("chartEmpresaAdm_areas1").getContext('2d')

					chartEmpresa.height = 100;
					new Chart(chartEmpresa, {
						type: 'bar',
						data: {
							defaultFontFamily: 'Oblivian',
							labels: ["Producto", "Admin", "Talento Humano", "Finanzas", "S. Al cliente", "Operaciones", "A. Laboral", "Innovación", "Marketing", "Ventas"],
							datasets: [
								// PERCEPCIÓN CLIENTE
								{
									label: 'Valor',
									backgroundColor: "#50368C",
									borderColor: "#50368C",
									data: dataAreasVitales1,
									fill: false,
								},
								// PERCEPCIÓN ESTADÍSTICA
								{
									label: "Valor",
									fill: false,
									backgroundColor: "#FED061",
									borderColor: "#FED061",
									data: dataPE1,
								}
							]
						},
						options: opciones
					});
				}

                // GRAFICA FECHA FINAL
				if ($('#chartEmpresaAdm_areas2').length > 0) {
					const chartEmpresa = document.getElementById("chartEmpresaAdm_areas2").getContext('2d')

					chartEmpresa.height = 100;
					new Chart(chartEmpresa, {
						type: 'bar',
						data: {
							defaultFontFamily: 'Oblivian',
							labels: ["Producto", "Admin", "Talento Humano", "Finanzas", "S. Al cliente", "Operaciones", "A. Laboral", "Innovación", "Marketing", "Ventas"],
							datasets: [
								// PERCEPCIÓN CLIENTE
								{
									label: 'Valor',
									backgroundColor: "#50368C",
									borderColor: "#50368C",
									data: dataAreasVitales2,
									fill: false,
								},
								// PERCEPCIÓN ESTADÍSTICA
								{
									label: "Valor",
									fill: false,
									backgroundColor: "#FED061",
									borderColor: "#FED061",
									data: dataPE2,
								}
							]
						},
						options: opciones
					});
				}
            }

            const chartPorDimensiones = (indicadores, nuevosProyectos) => {
                let chartPE_cliente = [0, 0, 0, 0]
                let chartPE_estadistica = [0, 0, 0, 0]
				let chartPE_cliente2 = [0, 0, 0, 0]
                let chartPE_estadistica2 = [0, 0, 0, 0]
                let titulos = ["Producto", "Gestión", "Corporativo", "Marketing"];

                const pe_cliente = indicadores.dimensiones1
				chartPE_cliente = [pe_cliente.producto, pe_cliente.administracion, pe_cliente.operaciones, pe_cliente.marketing]
				if (indicadores.dimensiones2) {
					const pe_cliente = indicadores.dimensiones2
					chartPE_cliente2 = [pe_cliente.producto, pe_cliente.administracion, pe_cliente.operaciones, pe_cliente.marketing]
				}

				// PERCEPCIÓN ESTADÍSTICA
				if (indicadores.pe_Dimensiones1) {
					const pe_estadistica = indicadores.pe_Dimensiones1
					chartPE_estadistica = [pe_estadistica.producto, pe_estadistica.administracion, pe_estadistica.operaciones, pe_estadistica.marketing]
				}
				if (indicadores.pe_Dimensiones2) {
					const pe_estadistica = indicadores.pe_Dimensiones2
					chartPE_estadistica2 = [pe_estadistica.producto, pe_estadistica.administracion, pe_estadistica.operaciones, pe_estadistica.marketing]
				}

				if (nuevosProyectos == 1) {
					titulos = ["Experiencia en el Rubro", "Mentalidad Empresarial", "Viabilidad del Negocio", "Estructura del Negocio"]
					chartPE_cliente = [pe_cliente.experiencia_rubro, pe_cliente.mentalidad, pe_cliente.viabilidad_, pe_cliente.estructura]

					if (indicadores.dimensiones2) {
						const pe_cliente = indicadores.dimensiones2
						chartPE_cliente2 = [pe_cliente.experiencia_rubro, pe_cliente.mentalidad, pe_cliente.viabilidad_, pe_cliente.estructura]
					}
				}

                if ($('#chartEmpresaAdm_dim1').length > 0) {
                    const chartEmpresa = document.getElementById("chartEmpresaAdm_dim1").getContext('2d')

                    chartEmpresa.height = 100;
					new Chart(chartEmpresa, {
						type: 'bar',
						data: {
							defaultFontFamily: 'Oblivian',
							labels: titulos,
							datasets: [
								// PERCEPCIÓN CLIENTE
								{
									label: 'Valor',
									backgroundColor: "#50368C",
									borderColor: "#50368C",
									data: chartPE_cliente,
									fill: false,
								},
								// PERCEPCIÓN ESTADÍSTICA
								{
									label: 'Valor',
									fill: false,
									backgroundColor: "#FED061",
									borderColor: "#FED061",
									data: chartPE_estadistica,
								}
							]
						},
						options: opciones
					});
				}

                if ($('#chartEmpresaAdm_dim2').length > 0) {
					const chartEmpresa = document.getElementById("chartEmpresaAdm_dim2").getContext('2d')
					chartEmpresa.height = 100;
					new Chart(chartEmpresa, {
						type: 'bar',
						data: {
							defaultFontFamily: 'Oblivian',
							labels: titulos,
							datasets: [
								// PERCEPCIÓN CLIENTE
								{
									label: 'Valor',
									backgroundColor: "#50368C",
									borderColor: "#50368C",
									data: chartPE_cliente2,
									fill: false,
								},
								// PERCEPCIÓN ESTADÍSTICA
								{
									label: 'Valor',
									fill: false,
									backgroundColor: "#FED061",
									borderColor: "#FED061",
									data: chartPE_estadistica2,
								}
							]
						},
						options: opciones
					});
				}
            }

            /*************************** FIN GRÁFICA INDICADORES *******************************/
            
            /* Function ============ */
            return {
                load: function (data, empresaNueva) {
                    {{#if graficas2}}
                    chartAreasVitales(data, empresaNueva);
                    chartPorDimensiones(data, empresaNueva);
                    {{/if}}
                },
            }

        } ();

        jQuery(window).on('load', function () {
			setTimeout(function () {
                if (document.getElementById('jsonIndicadores')) {
                    let data = document.getElementById('jsonIndicadores').value
                    data = JSON.parse(data)
                    const nuevosProyectos = document.getElementById('nuevosProyectos').value;
				    dzChartlist.load(data, nuevosProyectos);
                }
			}, 1000);
		});


		$(document).ready(function () {

            const URLhash = window.location.hash;
            if (URLhash === '#diagnostico_') {
                $('#item-diagnostico').trigger("click");
            }
            if (URLhash === '#analisis_') {
                $('#item-analisis').trigger("click");
            }
            if (URLhash === '#plan-estrategico') {
                $('#item-estrategico').trigger("click");
            }
            if (URLhash === '#plan-empresarial') {
                $('#item-empresarial').trigger("click");
            }

            $("#close-sidebar-empresarial").on("click", () => {
                $("#sidebarEmpresarial").removeClass("active")
                // PLAN EMPRESARIAL
                $('#cuerpoGeneral').css('overflow-y', 'auto')
                $('#actividad-sidebar1').attr('readonly', false)
                $("#descripcion-sidebar1").attr({'readonly': false, 'placeholder': 'Escribe una descripción detallada u observación para esta tarea..'})
                $("#estado1").css('display', 'inline-block')
                $('#txtFechaIni1').css('display', 'none')
                $('#txtFechaFin1').css('display', 'none')
                $('#estado-sidebar1').css('display', 'none')
                $('#fechaIni-sidebar1').css('display', 'inline-block')
                $('#fechaFin-sidebar1').css('display', 'inline-block')
                $('#btnGuardar-sidebar1').css('display', 'flex')
            })
            
            $("#close-sidebar-estrategico").on("click", () => {
                $("#sidebarEstrategico").removeClass("active")
                // PLAN ESTRATÉGICO
                $('#cuerpoGeneral').css('overflow-y', 'auto')
                $('#fechaIni-sidebar2').css('display', 'inline-block')
                $('#fechaFin-sidebar2').css('display', 'inline-block')
                $('#dimension-sidebar2').css('display', 'inline-block')
                $('#btnGuardar-sidebar2').css('display', 'flex')
                $("#estado2").css('display', 'inline-block')
                $('#actividad-sidebar2').attr('readonly', false)
                $("#responsable2").attr({'readonly': false, 'placeholder': 'Escribe un título..'})
                $("#descripcion-sidebar2").attr({'readonly': false, 'placeholder': 'Escribe una descripción detallada u observación para esta tarea..'})
                $('#txtFechaIni2').css('display', 'none')
                $('#txtFechaFin2').css('display', 'none')
                $('#txtDimension2').css('display', 'none')
                $('#estado-sidebar2').css('display', 'none')
            })

			{{#if frmDiag.tablasVacias}}
                const btnCargarInforme = document.getElementById('btnInfDiag');
                btnCargarInforme.addEventListener("click", function () {
                    Swal.fire(
                        'Lo sentimos!',
                        'Aún no sé ha llenado ningún cuestionario para subir un informe',
                        'warning'
                    )
                });
			{{else}}
			
				{{#if graficas2}}

                function guardarInforme(formData, estado, fecha, boton) {
                    fetch('/guardarInforme', {
                        method: 'POST',
                        body: formData,
                    })
                        .then(res => res.json())
                        .catch(error => console.error('Error:', error))
                        .then(response => {
                            if (response.ok) {

                                toastr.success("El informe ha sido cargado exitosamente", "Atención", {
                                    positionClass: "toast-top-center",
                                    timeOut: 5e3,
                                    closeButton: !0,
                                    debug: !1,
                                    newestOnTop: !0,
                                    progressBar: !0,
                                    preventDuplicates: !0,
                                    onclick: null,
                                    showDuration: "300",
                                    hideDuration: "1000",
                                    extendedTimeOut: "1000",
                                    showEasing: "swing",
                                    hideEasing: "linear",
                                    showMethod: "fadeIn",
                                    hideMethod: "fadeOut",
                                    tapToDismiss: !1
                                })

                                if (boton == 1){
                                    btnVerInforme.style.display = 'block'
                                    btnVerInforme.href = response.url
                                } 
                                if (boton == 2){
                                    btnVerInformeProd.style.display = 'block'
                                    btnVerInformeProd.href = response.url
                                } 
                                if (boton == 3){
                                    btnVerInformeAdmin.style.display = 'block'
                                    btnVerInformeAdmin.href = response.url
                                } 
                                if (boton == 4){
                                    btnVerInformeOpe.style.display = 'block'
                                    btnVerInformeOpe.href = response.url
                                } 
                                if (boton == 5){
                                    btnVerInformeMarketing.style.display = 'block'
                                    btnVerInformeMarketing.href = response.url
                                } 
                                if (boton == 6){
                                    btnVerInformeGeneral.style.display = 'block'
                                    btnVerInformeGeneral.href = response.url
                                } 
                                if (boton == 7){
                                    btnVerInformePlan.style.display = 'block'
                                    btnVerInformePlan.href = response.url
                                } 

                                estado.classList.remove("badge-warning")
                                estado.classList.add("badge-success")
                                estado.innerHTML = "Cargado"
                                fecha.innerHTML = response.fecha;
                                
                            } else {
                                toastr.danger("No sé pudo subir el informe, contacte a soporte", "Error", {
                                    positionClass: "toast-top-center",
                                    timeOut: 5e3,
                                    closeButton: !0,
                                    debug: !1,
                                    newestOnTop: !0,
                                    progressBar: !0,
                                    preventDuplicates: !0,
                                    onclick: null,
                                    showDuration: "300",
                                    hideDuration: "1000",
                                    extendedTimeOut: "1000",
                                    showEasing: "swing",
                                    hideEasing: "linear",
                                    showMethod: "fadeIn",
                                    hideMethod: "fadeOut",
                                    tapToDismiss: !1
                                })

                            }
                        });
                }
                
                /* Etapa 1 - Informe Diagnóstico */
                const informeDiag = document.getElementById('inputInformeDiag');
                const btnVerInforme = document.getElementById('btnVerInforme');
                const codigoEmpresa = document.getElementById("codigoEmpresa").value;
                const consultor = document.getElementById("idConsultor").value;

                if (informeDiag) {
                    informeDiag.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstado = document.getElementById("infoEstado");
                        const spanFecha = document.getElementById("spanFecha");
                        const nomInformeDiag = 'Informe diagnóstico';
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomInformeDiag);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstado, spanFecha, 1)
                    });
                }
				
                /* ----------------------------- Etapa 2 - Informe Análisis ----------------------------- */
                // Dimensión Producto
                const informeProd = document.getElementById('inputInformeProd');
                const btnVerInformeProd = document.getElementById('btnVerInformeProd');
                if (informeProd) {
                    informeProd.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstadoProd = document.getElementById("infoEstadoProd");
                        const spanFechaProd = document.getElementById("spanFechaProd");
                        const nomProducto = 'Informe de dimensión producto'
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomProducto);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstadoProd, spanFechaProd, 2)
                    });
                }

                // Dimensión Administración
                const informeAdmin = document.getElementById("inputInformeAdmin");
                const btnVerInformeAdmin = document.getElementById("btnVerInformeAdmin");
                if (informeAdmin) {
                    informeAdmin.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstadoAdmin = document.getElementById("infoEstadoAdmin");
                        const spanFechaAdmin = document.getElementById("spanFechaAdmin");
                        const nomAdmin = 'Informe de dimensión administración';
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomAdmin);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstadoAdmin, spanFechaAdmin, 3)
                    });
                }

                // Dimensión Operaciones
                const informeOpe = document.getElementById('inputInformeOperaciones');
                const btnVerInformeOpe = document.getElementById('btnVerInformeOpe');
                if (informeOpe) {
                    informeOpe.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstadoOpe = document.getElementById("infoEstadoOpe");
                        const spanFechaOpe = document.getElementById("spanFechaOpe");
                        const nomOperacion = 'Informe de dimensión operaciones'
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomOperacion);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstadoOpe, spanFechaOpe, 4)
                    });
                }

                // Dimensión Marketing
                const informeMarketing = document.getElementById("inputInformeMarketing");
                const btnVerInformeMarketing = document.getElementById("btnVerInformeMarketing");
                if (informeMarketing) {
                    informeMarketing.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstadoMarketing = document.getElementById("infoEstadoMarketing");
                        const spanFechaMarketing = document.getElementById("spanFechaMarketing");
                        const nomMarketing = 'Informe de dimensión marketing'
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomMarketing);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstadoMarketing, spanFechaMarketing, 5)
                    });
                }

                // Informe Análisis General
                const inputInformeGeneral = document.getElementById("inputInformeGeneral");
                const btnVerInformeGeneral = document.getElementById("btnVerInformeGeneral");
                if (inputInformeGeneral) {
                    inputInformeGeneral.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstadoGeneral = document.getElementById("infoEstadoGeneral");
                        const spanFechaGeneral = document.getElementById("spanFechaGeneral");
                        const nomInformeAnalisis = 'Informe de análisis'
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomInformeAnalisis);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstadoGeneral, spanFechaGeneral, 6)
                    });
                }

                /* ----------------------------- Etapa 4 - PLAN ESTRATÉGICO ----------------------------- */
                // Informe Plan Estratégico
                const inputInformePlan = document.getElementById('inputInformePlan');
                const btnVerInformePlan = document.getElementById('btnVerInformePlan');
                if (inputInformePlan) {
                    inputInformePlan.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        const infoEstadoPlan = document.getElementById("infoEstadoPlan");
                        const spanFechaPlan = document.getElementById("spanFechaPlan");
                        const nomInformePlan = 'Informe de plan estratégico';
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('consultor', consultor);
                        formData.append('nombreInforme', nomInformePlan);
                        formData.append('zonaHoraria', tzLocal);
                        guardarInforme(formData, infoEstadoPlan, spanFechaPlan, 7)
                    });
                }

                /* ----------------------------- Etapa 3 - PLAN EMPRESARIAL ----------------------------- */
                function guardarArchivo_Empresarial(formData, estado, fecha, boton) {
                    fetch('/guardar-archivos-empresarial', {
                        method: 'POST',
                        body: formData,
                    })
                        .then(res => res.json())
                        .catch(error => console.error('Error:', error))
                        .then(response => {
                            if (response.ok) {

                                toastr.success("El archivo ha sido cargado exitosamente", "Atención", {
                                    positionClass: "toast-top-center",
                                    timeOut: 5e3,
                                    closeButton: !0,
                                    debug: !1,
                                    newestOnTop: !0,
                                    progressBar: !0,
                                    preventDuplicates: !0,
                                    onclick: null,
                                    showDuration: "300",
                                    hideDuration: "1000",
                                    extendedTimeOut: "1000",
                                    showEasing: "swing",
                                    hideEasing: "linear",
                                    showMethod: "fadeIn",
                                    hideMethod: "fadeOut",
                                    tapToDismiss: !1
                                })

                                if (boton == 1){
                                    btnArchivoNegocio.style.display = 'block'
                                    btnArchivoNegocio.href = response.url
                                } 
                                if (boton == 2){
                                    btnArchivoMarketing.style.display = 'block'
                                    btnArchivoMarketing.href = response.url
                                } 
                                if (boton == 3){
                                    btnArchivoBranding.style.display = 'block'
                                    btnArchivoBranding.href = response.url
                                } 
                                if (boton == 4){
                                    btnArchivoRenders.style.display = 'block'
                                    btnArchivoRenders.href = response.url
                                }
                                if (boton == 5){
                                    btnArchivoOtro.style.display = 'block'
                                    btnArchivoOtro.href = response.url
                                }
                                if (boton == 6){
                                    btnArchivoOtro2.style.display = 'block'
                                    btnArchivoOtro2.href = response.url
                                } 
                                if (boton == 7){
                                    btnArchivoOtro3.style.display = 'block'
                                    btnArchivoOtro3.href = response.url
                                } 

                                estado.classList.remove("badge-warning")
                                estado.classList.add("badge-success")
                                estado.innerHTML = "Cargado"
                                fecha.innerHTML = response.fecha;
                                
                            } else {
                                toastr.warning("No sé pudo subir el archivo, contacte a soporte", "Error", {
                                    positionClass: "toast-top-center",
                                    timeOut: 5e3,
                                    closeButton: !0,
                                    debug: !1,
                                    newestOnTop: !0,
                                    progressBar: !0,
                                    preventDuplicates: !0,
                                    onclick: null,
                                    showDuration: "300",
                                    hideDuration: "1000",
                                    extendedTimeOut: "1000",
                                    showEasing: "swing",
                                    hideEasing: "linear",
                                    showMethod: "fadeIn",
                                    hideMethod: "fadeOut",
                                    tapToDismiss: !1
                                })

                            }
                        });
                }
                
                // Plan de negocio (Archivo)
                const input_PlanNegocio = document.getElementById("input_PlanNegocio");
                const btnArchivoNegocio = document.getElementById("btnArchivoNegocio");
                if (input_PlanNegocio) {
                    const fecha = document.getElementById("spanFecha_PlanNegocio");
                    const estado = document.getElementById("estado_PlanNegocio");
                    input_PlanNegocio.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('tipo', 'Plan de negocio');
                        formData.append('nombreArchivo', null);
                        formData.append('zonaHoraria', tzLocal);
                        guardarArchivo_Empresarial(formData, estado, fecha, 1)
                    });
                }

                // Plan de Marketing (Archivo)
                const input_PlanMarketing = document.getElementById("input_PlanMarketing");
                const btnArchivoMarketing = document.getElementById("btnArchivoMarketing");
                if (input_PlanMarketing) {
                    const fecha = document.getElementById("spanFecha_PlanMarketing");
                    const estado = document.getElementById("estado_PlanMarketing");
                    input_PlanMarketing.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('tipo', 'Plan de marketing');
                        formData.append('nombreArchivo', null);
                        formData.append('zonaHoraria', tzLocal);
                        guardarArchivo_Empresarial(formData, estado, fecha, 2)
                    });
                }

                // Branding (Archivo)
                const input_PlanBranding = document.getElementById("input_PlanBranding");
                const btnArchivoBranding = document.getElementById("btnArchivoBranding");
                if (input_PlanBranding) {
                    const fecha = document.getElementById("spanFecha_PlanBranding");
                    const estado = document.getElementById("estado_PlanBranding");
                    input_PlanBranding.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('tipo', 'Branding');
                        formData.append('nombreArchivo', null);
                        formData.append('zonaHoraria', tzLocal);
                        guardarArchivo_Empresarial(formData, estado, fecha, 3)
                    });
                }

                // Renders (Archivo)
                const input_PlanRenders = document.getElementById("input_PlanRenders");
                const btnArchivoRenders = document.getElementById("btnArchivoRenders");
                if (input_PlanRenders) {
                    const fecha = document.getElementById("spanFecha_PlanRenders");
                    const estado = document.getElementById("estado_PlanRenders");
                    input_PlanRenders.addEventListener('change', (e) => {
                        console.log(e)
                        const file = e.target.files[0]
                        // Capturando Zona Horaria Local
                        const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('codigoEmpresa', codigoEmpresa);
                        formData.append('tipo', 'Renders');
                        formData.append('nombreArchivo', null);
                        formData.append('zonaHoraria', tzLocal);
                        guardarArchivo_Empresarial(formData, estado, fecha, 4)
                    });
                }

                // Website (Link)
                const input_PlanWebsite = document.getElementById("input_PlanWebsite");
                if (input_PlanWebsite) {
                    const input_txt = document.getElementById("input_txtWebsite");
                    const fecha = document.getElementById("spanFecha_PlanWebsite");
                    const estado = document.getElementById("estado_PlanWebsite");
                    const btnArchivoWebsite = document.getElementById("btnArchivoWebsite");

                    input_PlanWebsite.addEventListener('click', (e) => {
                        if (input_txt.value != '') {
                            // Capturando Zona Horaria Local
                            const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                            const link = input_txt.value;

                            fetch('/website-empresarial', {
                                method: 'POST',
                                body: JSON.stringify({codigoEmpresa, tzLocal, link}),
                                headers: {'Content-Type': 'application/json'},
                            })
                                .then(res => res.json())
                                .catch(error => console.error('Error:', error))
                                .then(response => {
                                    if (response.ok) {
                                        toastr.success("El link ha sido cargado exitosamente", "Atención", {
                                            positionClass: "toast-top-center",
                                            timeOut: 5e3,
                                            closeButton: !0,
                                            debug: !1,
                                            newestOnTop: !0,
                                            progressBar: !0,
                                            preventDuplicates: !0,
                                            onclick: null,
                                            showDuration: "300",
                                            hideDuration: "1000",
                                            extendedTimeOut: "1000",
                                            showEasing: "swing",
                                            hideEasing: "linear",
                                            showMethod: "fadeIn",
                                            hideMethod: "fadeOut",
                                            tapToDismiss: !1
                                        })

                                        estado.classList.remove("badge-warning")
                                        estado.classList.add("badge-success")
                                        estado.innerHTML = "Cargado"
                                        fecha.innerHTML = response.fecha;
                                        btnArchivoWebsite.style.display = 'block'
                                        btnArchivoWebsite.href = response.url

                                    } else {
                                        toastr.danger("No sé pudo guardar el link, contacte a soporte", "Error", {
                                            positionClass: "toast-top-center",
                                            timeOut: 5e3,
                                            closeButton: !0,
                                            debug: !1,
                                            newestOnTop: !0,
                                            progressBar: !0,
                                            preventDuplicates: !0,
                                            onclick: null,
                                            showDuration: "300",
                                            hideDuration: "1000",
                                            extendedTimeOut: "1000",
                                            showEasing: "swing",
                                            hideEasing: "linear",
                                            showMethod: "fadeIn",
                                            hideMethod: "fadeOut",
                                            tapToDismiss: !1
                                        })
                                    }
                                });
                        } else {
                            toastr.warning("El campo de Website no puede estar vacío", "Error", {
                                positionClass: "toast-top-center",
                                timeOut: 5e3,
                                closeButton: !0,
                                debug: !1,
                                newestOnTop: !0,
                                progressBar: !0,
                                preventDuplicates: !0,
                                onclick: null,
                                showDuration: "300",
                                hideDuration: "1000",
                                extendedTimeOut: "1000",
                                showEasing: "swing",
                                hideEasing: "linear",
                                showMethod: "fadeIn",
                                hideMethod: "fadeOut",
                                tapToDismiss: !1
                            })
                        }
                    });
                }

                // Otro (Archivo)
                const input_PlanOtro = document.getElementById("input_PlanOtro");
                const btnArchivoOtro = document.getElementById("btnArchivoOtro");
                if (input_PlanOtro) {
                    const input_txt = document.getElementById("input_txtOtro");
                    const fecha = document.getElementById("spanFecha_PlanOtro");
                    const estado = document.getElementById("estado_PlanOtro");
                    input_PlanOtro.addEventListener('change', (e) => {
                        console.log("entrada")
                        console.log(e)
                        if (input_txt.value == '') {
                            toastr.warning("El campo de Otro no puede estar vacío", "Error", {
                                positionClass: "toast-top-center",
                                timeOut: 5e3,
                                closeButton: !0,
                                debug: !1,
                                newestOnTop: !0,
                                progressBar: !0,
                                preventDuplicates: !0,
                                onclick: null,
                                showDuration: "300",
                                hideDuration: "1000",
                                extendedTimeOut: "1000",
                                showEasing: "swing",
                                hideEasing: "linear",
                                showMethod: "fadeIn",
                                hideMethod: "fadeOut",
                                tapToDismiss: !1
                            })
                            e = null;
                        } else {
                            const file = e.target.files[0]
                            // Capturando Zona Horaria Local
                            const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                            const formData = new FormData();
                            formData.append('file', file);
                            formData.append('codigoEmpresa', codigoEmpresa);
                            formData.append('tipo', 'Otro');
                            formData.append('nombreArchivo', input_txt.value);
                            formData.append('zonaHoraria', tzLocal);
                            guardarArchivo_Empresarial(formData, estado, fecha, 5)
                        }
                        console.log("\nSalida")
                        console.log(e)
                    });
                }

                // Otro 2 (Archivo)
                const input_PlanOtro2 = document.getElementById("input_PlanOtro2");
                const btnArchivoOtro2 = document.getElementById("btnArchivoOtro2");
                if (input_PlanOtro2) {
                    const input_txt = document.getElementById("input_txtOtro2");
                    const fecha = document.getElementById("spanFecha_PlanOtro2");
                    const estado = document.getElementById("estado_PlanOtro2");
                    input_PlanOtro2.addEventListener('change', (e) => {
                        console.log("entrada")
                        console.log(e)
                        if (input_txt.value == '') {
                            toastr.warning("El campo de Otro no puede estar vacío", "Error", {
                                positionClass: "toast-top-center",
                                timeOut: 5e3,
                                closeButton: !0,
                                debug: !1,
                                newestOnTop: !0,
                                progressBar: !0,
                                preventDuplicates: !0,
                                onclick: null,
                                showDuration: "300",
                                hideDuration: "1000",
                                extendedTimeOut: "1000",
                                showEasing: "swing",
                                hideEasing: "linear",
                                showMethod: "fadeIn",
                                hideMethod: "fadeOut",
                                tapToDismiss: !1
                            })
                            e = null;
                        } else {
                            const file = e.target.files[0]
                            // Capturando Zona Horaria Local
                            const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                            const formData = new FormData();
                            formData.append('file', file);
                            formData.append('codigoEmpresa', codigoEmpresa);
                            formData.append('tipo', 'Otro 2');
                            formData.append('nombreArchivo', input_txt.value);
                            formData.append('zonaHoraria', tzLocal);
                            guardarArchivo_Empresarial(formData, estado, fecha, 6)
                        }
                        console.log("\nSalida")
                        console.log(e)
                    });
                }

                // Otro 3 (Archivo)
                const input_PlanOtro3 = document.getElementById("input_PlanOtro3");
                const btnArchivoOtro3 = document.getElementById("btnArchivoOtro3");
                if (input_PlanOtro3) {
                    const input_txt = document.getElementById("input_txtOtro3");
                    const fecha = document.getElementById("spanFecha_PlanOtro3");
                    const estado = document.getElementById("estado_PlanOtro3");
                    input_PlanOtro3.addEventListener('change', (e) => {
                        console.log("entrada")
                        console.log(e)
                        if (input_txt.value == '') {
                            toastr.warning("El campo de Otro no puede estar vacío", "Error", {
                                positionClass: "toast-top-center",
                                timeOut: 5e3,
                                closeButton: !0,
                                debug: !1,
                                newestOnTop: !0,
                                progressBar: !0,
                                preventDuplicates: !0,
                                onclick: null,
                                showDuration: "300",
                                hideDuration: "1000",
                                extendedTimeOut: "1000",
                                showEasing: "swing",
                                hideEasing: "linear",
                                showMethod: "fadeIn",
                                hideMethod: "fadeOut",
                                tapToDismiss: !1
                            })
                            e = null;
                        } else {
                            const file = e.target.files[0]
                            // Capturando Zona Horaria Local
                            const tzLocal = Intl.DateTimeFormat().resolvedOptions().timeZone;
                            const formData = new FormData();
                            formData.append('file', file);
                            formData.append('codigoEmpresa', codigoEmpresa);
                            formData.append('tipo', 'Otro 3');
                            formData.append('nombreArchivo', input_txt.value);
                            formData.append('zonaHoraria', tzLocal);
                            guardarArchivo_Empresarial(formData, estado, fecha, 7)
                        }
                        console.log("\nSalida")
                        console.log(e)
                    });
                }

                {{/if}}

			{{/if}}

		});

	})();
</script>